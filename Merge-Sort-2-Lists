"""
Given two lists, merge and sort them in the most optimal way
"""

from typing import List

def merge_and_sort_lists(list1: List[int], list2: List[int]) -> List[int]:
    # Your implementation goes here
    # Two Pointers Aproach
    if not list1 and not list2:
        return []
    res = []
    p1, p2 = 0 , 0
    while p1 < len(list1) and p2 < len(list2):
        if list1[p1] < list2[p2]:
            res.append(list1[p1])
            p1 += 1
        else:
            res.append(list2[p2])
            p2 += 1
    
    if p1 < len(list1):
        for i in range(p1, len(list1)):
            res.append(list1[p1])
            p1 += 1
            
    if p2 < len(list2):
        for i in range(p2, len(list2)):
            res.append(list2[p2])
            p2 += 1
            
    return res        

# Test cases
if __name__ == "__main__":
    # Test Case 1
    list1 = [1, 3, 5, 7]
    list2 = [2, 4, 6, 8]
    print(merge_and_sort_lists(list1, list2))  # Expected output: [1, 2, 3, 4, 5, 6, 7, 8]

    # Test Case 2
    list1 = []
    list2 = [1, 2, 3]
    print(merge_and_sort_lists(list1, list2))  # Expected output: [1, 2, 3]

    # Test Case 3
    list1 = [0, 1, 2]
    list2 = [-1, 1, 3]
    print(merge_and_sort_lists(list1, list2))  # Expected output: [-1, 0, 1, 1, 2, 3]

    # Test Case 4
    list1 = [5, 10, 15]
    list2 = [1, 2, 3, 4]
    print(merge_and_sort_lists(list1, list2))  # Expected output: [1, 2, 3, 4, 5, 10, 15]

    # Test Case 5
    list1 = [1, 3, 5]
    list2 = [2, 2, 4, 6]
    print(merge_and_sort_lists(list1, list2))  # Expected output: [1, 2, 2, 3, 4, 5, 6]

    # Test Case 6
    list1 = []
    list2 = []
    print(merge_and_sort_lists(list1, list2))  # Expected output: []
